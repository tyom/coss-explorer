#!/usr/local/bin/node

var request = require('request');
var parser = require('./lib/parser');
var fs = require('fs');
var cheerio = require('cheerio');
var colors = require('colors');
var sugar = require('sugar');
var cli = require('commander');

cli
  .version('0.0.1')
  .usage('[options] <file> or <url>')
  .option('-c, --css [selector]', 'Root CSS selector')
  .option('-f, --file [source]', 'HTML source file')
  .option('-u, --url [source]', 'HTML source URL')
  .parse(process.argv);


var source;

if(cli.file) {
  try {
    source = cheerio.load(fs.readFileSync(cli.file), {
      ignoreWhiteSpace: true
    });
  } catch(e) {
    console.log('Source not found. Check and try again.');
  }
}

if(cli.url) {
  request(cli.url, function(err, resp, body){
    if(err) {
      console.log(err);
      return;
    }
    source = cheerio.load(body, {
      ignoreWhiteSpace: true
    });
    outputToConsole();
  });
}

function outputToConsole() {
  if(source && cli.css) {
    var cheeriod = source(cli.css);

    if(cheeriod.length < 1) {
      console.log('Nothing found. Check your CSS selector');
    }

    parser.findAll(cheeriod).each(function(item) {
      var prefix = Array(item.depth+1).join("│ ");
      var elName = "▾ ".grey + item.el.cyan;
      var componentName = item.name && "." + (item.type === 'component' ? item.name.yellow : item.name.white) || "";
      var modifiers = !!item.modifiers.length && "." + item.modifiers.join(".").blue || "";
      var states = !!item.states.length && "." + item.states.join(".").green || "";

      console.log(prefix.grey + elName + componentName + modifiers + states);
    });
  } else {
    cli.help();
  }
}